#include <stdio.h>
#include <conio.h>
#include <math.h>
#include <stdlib.h>
#include <time.h>


int N = 10;
int global_counter = 0;
int col_boats = 10;
int counter = 0;

int field[10][10] = {{0}};
int game_field[10][10] = {{0}};

int check(int a, int b)
{
    if (a < 0 || b > 9 || a > 9 || b < 0) {return 3;}
    if (field[b][a] != 0) {return 1;}
    if (a >= 0 && b >= 0 && a <= 9 && b <= 9)
    {
        if (field[b - 1][a - 1] != 0 || field[b - 1][a + 1] != 0 || field[b + 1][a - 1] != 0 || field[b + 1][a + 1] != 0 || field[b][a + 1] != 0 || field[b][a - 1] != 0 || field[b + 1][a] != 0 || field[b - 1][a] != 0) return 2;
    }
    switch(a)
    {
        case(0):
            {
                switch(b)
                {
                    case(0):
                        {
                            if (field[b][a + 1] != 0 || field[b + 1][a] != 0 || field[b + 1][a + 1] != 0) return 2;
                            break;
                        }
                    case(9):
                        {
                            if (field[b - 1][a] != 0 || field[b - 1][a + 1] != 0 || field[b][a + 1] != 0) return 2;
                            break;
                        }
                    default:
                        {
                            if (field[b - 1][a] != 0 || field[b - 1][a + 1] != 0 || field[b + 1][a] != 0 || field[b + 1][a + 1] != 0 || field[b][a + 1] != 0) return 2;
                            break;
                        }
                }
                break;
            }
        case(9):
            {
                switch(b)
                {
                    case(0):
                        {
                            if (field[b][a - 1] != 0 || field[b + 1][a] != 0 || field[b + 1][a - 1] != 0) return 2;
                            break;
                        }
                    case(9):
                        {
                            if (field[b - 1][a] != 0 || field[b - 1][a - 1] != 0 || field[b][a - 1] != 0) return 2;
                            break;
                        }
                    default:
                        {
                            if (field[b - 1][a] != 0 || field[b - 1][a - 1] != 0 || field[b + 1][a] != 0 || field[b + 1][a - 1] != 0 || field[b][a - 1] != 0) return 2;
                            break;
                        }
                }
                break;
            }
        default:
            {
                switch(b)
                {
                    case(0):
                    {
                        if (field[b][a - 1] != 0 || field[b + 1][a - 1] != 0 || field[b][a + 1] != 0 || field[b + 1][a + 1] != 0 || field[b + 1][a] != 0) return 2;
                        break;
                    }
                    case(9):
                    {
                        if (field[b][a - 1] != 0 || field[b - 1][a - 1] != 0 || field[b][a + 1] != 0 || field[b - 1][a + 1] != 0 || field[b - 1][a] != 0) return 2;
                        break;
                    }
                }
                break;
            }
    }
    return 0;
}


void draw()
{
    printf("\n");
    for (int i = 0; i < 10; ++i)
    {
        for (int j = 0; j < 10; ++j) {printf(" %2d ", game_field[i][j]);}
        printf("\n");
    }
    printf("\n");
}


void generate()
{
    srand(time(NULL));
    int one_level = 4;
    int two_level_u = rand() % 4;
    int two_level_r = 3 - two_level_u;
    int three_level_u = rand() % 3;
    int three_level_r = 2 - three_level_u;
    int four_level = rand() % 2;
    for (int i = 0; i < N; ++i) for (int j = 0; j < N; ++j) {field[i][j] = 0;}
    int x, y;
    for (int i = 0; i < one_level; ++i)
    {
        x = rand() % N; y = rand() % N;
        while (check(x, y) != 0) {x = rand() % N; y = rand() % N;}
        field[y][x] = 1;

    }
    for (int i = 0; i < two_level_u; ++i)
    {
        x = rand() % N; y = rand() % N;
        while (check(x, y) != 0 || check(x, y + 1) != 0) {x = rand() % N; y = rand() % N;}
        field[y][x] = 2;
        field[y + 1][x] = 2;
    }
    for (int i = 0; i < two_level_r; ++i)
    {
        x = rand() % N; y = rand() % N;
        while (check(x, y) != 0 || check(x + 1, y) != 0) {x = rand() % N; y = rand() % N;}
        field[y][x] = 2;
        field[y][x + 1] = 2;
    }
    for (int i = 0; i < three_level_u; ++i)
    {
        x = rand() % N; y = rand() % N;
        while (check(x, y) != 0 || check(x, y + 1) != 0 || check(x, y + 2) != 0) {x = rand() % N; y = rand() % N;}
        field[y][x] = 3;
        field[y + 1][x] = 3;
        field[y + 2][x] = 3;
    }
    for (int i = 0; i < three_level_r; ++i)
    {
        x = rand() % N; y = rand() % N;
        while (check(x, y) != 0 || check(x + 1, y) != 0 || check(x + 2, y) != 0) {x = rand() % N; y = rand() % N;}
        field[y][x] = 3;
        field[y][x + 1] = 3;
        field[y][x + 2] = 3;
    }
    if (four_level == 1)
    {
        x = rand() % N; y = rand() % N;
        while (check(x, y) != 0 || check(x, y + 1) != 0 || check(x, y + 2) != 0 || check(x, y + 3) != 0) {x = rand() % N + 1; y = rand() % N + 1;}
        field[y][x] = 4;
        field[y + 1][x] = 4;
        field[y + 2][x] = 4;
        field[y + 3][x] = 4;
    }
    else
    {
        x = rand() % N; y = rand() % N;
        while (check(x, y) != 0 || check(x + 1, y) != 0 || check(x + 2, y) != 0 || check(x + 3, y) != 0) {x = rand() % N + 1; y = rand() % N + 1;}
        field[y][x] = 4;
        field[y][x + 1] = 4;
        field[y][x + 2] = 4;
        field[y][x + 3] = 4;
    }

    printf("\n");
    for (int i = 0; i < 10; ++i)
    {
        for (int j = 0; j < 10; ++j) {printf(" %2d ", field[i][j]);}
        printf("\n");
    }
    printf("\n");
}

void step(int x, int y)
{
    --x; --y;
    if (check(x, y) == 1)
    {
        ++counter;
        game_field[y][x] = 1;
    }
    else game_field[y][x] = -1;
    draw();
}


void cleaning() // очистка экрана
{
    system("@cls||clear");
}


void restart()
{
    counter = 0;
    for (int i = 0; i < N; ++i) for (int j = 0; j < N; ++j) game_field[i][j] = 0;
    generate();
    ++global_counter;
}

int main()
{
    int q = 1;
    int x, y;
    while (q != 0)
    {
            restart();
            printf("Round: %d\n", global_counter);
            while (counter < 20)
            {
                printf("SCORE: %d\n", counter * 10);
                scanf("%d %d", &x, &y);
                while((x < 1) || (x > 11)){printf("Wrong x! Enter x > 0 and x < 11\n"); scanf("%d", &x);}
                while((y < 1) || (y > 11)){printf("Wrong y! Enter y > 0 and y < 11\n"); scanf("%d", &y);}
                step(x, y);
                printf("\nTap Enter to continue");
                getch();
                cleaning();
            }
            printf("Enter 0 to stop and other number continue\n");
            scanf("%d", &q);
    }
}

